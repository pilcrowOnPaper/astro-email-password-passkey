---
import { get2FARedirect } from "@lib/2fa";

if (Astro.locals.session !== null && Astro.locals.user !== null) {
	if (!Astro.locals.user.emailVerified) {
		return Astro.redirect("/verify-email");
	}
	if (!Astro.locals.session.twoFactorVerified) {
		return Astro.redirect(get2FARedirect(Astro.locals.user));
	}
	return Astro.redirect("/");
}
---

<html>
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Create an account</title>
	</head>
	<body>
		<main>
			<h1>Sign in</h1>
			<form id="form-login">
				<label for="form-login.email">Email</label>
				<input type="email" id="form-login.email" name="email" autocomplete="username" required /><br />
				<label for="form-login.password">Password</label>
				<input type="password" id="form-login.password" name="password" autocomplete="current-password" required /><br
				/>
				<button>Continue</button>
				<p id="form-login.message"></p>
			</form>
			<div>
				<button id="button-passkey">Sign in with passkeys</button>
				<p id="message-passkey"></p>
			</div>
			<a href="/signup">Create an account</a>
			<a href="/forgot-password">Forgot password?</a>
		</main>
	</body>
</html>

<script>
	import { createChallenge } from "@client/webauthn";
	import { encodeBase64 } from "@oslojs/encoding";

	const formElement = document.getElementById("form-login")!;
	const formErrorElement = document.getElementById("form-login.message")!;

	formElement.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(e.target as HTMLFormElement);
		const data = {
			email: formData.get("email"),
			password: formData.get("password")
		};
		const response = await fetch("/api/login", {
			method: "POST",
			body: JSON.stringify(data)
		});
		if (response.ok) {
			window.location.href = "/";
		} else {
			formErrorElement.innerText = await response.text();
		}
	});

	const passkeyButton = document.getElementById("button-passkey")!;
	const passkeyErrorElement = document.getElementById("message-passkey")!;

	passkeyButton.addEventListener("click", async () => {
		const challenge = await createChallenge();

		const credential = await navigator.credentials.get({
			publicKey: {
				challenge,
				userVerification: "discouraged"
			}
		});

		if (!(credential instanceof PublicKeyCredential)) {
			throw new Error("Failed to create public key");
		}
		if (!(credential.response instanceof AuthenticatorAssertionResponse)) {
			throw new Error("Unexpected error");
		}

		const response = await fetch("/api/passkey/authenticate", {
			method: "POST",
			// this example uses JSON but you can use something like CBOR to get something more compact
			body: JSON.stringify({
				credential_id: encodeBase64(new Uint8Array(credential.rawId)),
				signature: encodeBase64(new Uint8Array(credential.response.signature)),
				authenticator_data: encodeBase64(new Uint8Array(credential.response.authenticatorData)),
				client_data_json: encodeBase64(new Uint8Array(credential.response.clientDataJSON))
			})
		});

		if (response.ok) {
			window.location.href = "/";
		} else {
			passkeyErrorElement.innerText = await response.text();
		}
	});
</script>
