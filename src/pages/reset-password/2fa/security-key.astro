---
import { getPasswordReset2FARedirect } from "@lib/server/2fa";
import { validatePasswordResetSessionRequest } from "@lib/server/password-reset";

const { session, user } = validatePasswordResetSessionRequest(Astro);

if (session === null) {
	return Astro.redirect("/forgot-password");
}
if (!session.emailVerified) {
	return Astro.redirect("/reset-password/verify-email");
}
if (!user.registered2FA) {
	return Astro.redirect("/reset-password");
}
if (!user.registeredSecurityKey) {
	return Astro.redirect(getPasswordReset2FARedirect(user));
}
if (session.twoFactorVerified) {
	return Astro.redirect("/reset-password");
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Verify with security keys</title>
	</head>
	<body>
		<main>
			<h1>Verify with security keys</h1>
			<div>
				<button id="button-verify">Verify</button>
				<p id="message-verify"></p>
			</div>
			<a href="/reset-password/2fa/recovery-code">Use recovery code</a>
			{user.registeredPasskey && <a href="/reset-password/2fa/passkey">Use passkeys</a>}
			{user.registeredTOTP && <a href="/reset-password/2fa/totp">Use autheticator apps</a>}
		</main>
	</body>
</html>

<script>
	import { createChallenge } from "@lib/client/webauthn";
	import { encodeBase64 } from "@oslojs/encoding";

	const buttonElement = document.getElementById("button-verify") as HTMLButtonElement;
	const errorElement = document.getElementById("message-verify") as HTMLElement;

	buttonElement.addEventListener("click", async () => {
		const challenge = await createChallenge();

		const credential = await navigator.credentials.get({
			publicKey: {
				challenge,
				userVerification: "discouraged"
			}
		});

		if (!(credential instanceof PublicKeyCredential)) {
			throw new Error("Failed to create public key");
		}
		if (!(credential.response instanceof AuthenticatorAssertionResponse)) {
			throw new Error("Unexpected error");
		}

		const response = await fetch("/api/password-reset/2fa/security-key", {
			method: "POST",
			// this example uses JSON but you can use something like CBOR to get something more compact
			body: JSON.stringify({
				credential_id: encodeBase64(new Uint8Array(credential.rawId)),
				signature: encodeBase64(new Uint8Array(credential.response.signature)),
				authenticator_data: encodeBase64(new Uint8Array(credential.response.authenticatorData)),
				client_data_json: encodeBase64(new Uint8Array(credential.response.clientDataJSON))
			})
		});

		if (response.ok) {
			window.location.href = "/reset-password";
		} else {
			errorElement.innerText = await response.text();
		}
	});
</script>
