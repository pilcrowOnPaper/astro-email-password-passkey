---
import { getPasswordReset2FARedirect } from "@lib/2fa";
import { validatePasswordResetSessionRequest } from "@lib/password";

const { session, user } = validatePasswordResetSessionRequest(Astro);
if (session === null) {
	return Astro.redirect("/forgot-password");
}
if (!session.emailVerified) {
	return Astro.redirect("/reset-password/verify-email");
}
if (user.registered2FA && !session.twoFactorVerified) {
	return Astro.redirect(getPasswordReset2FARedirect(getPasswordReset2FARedirect));
}
---

<html>
	<head>
		<title>Enter your new password</title>
	</head>
	<body>
		<main>
			<h1>Enter your new password</h1>
			<form id="form-reset">
				<input id="form-reset.email" name="email" value={session.email} hidden required /><br />
				<label for="form-reset.password">Password</label>
				<input type="password" id="form-reset.password" name="password" autocomplete="new-password" required /><br />
				<button>Reset password</button>
				<p id="form-reset.message"></p>
			</form>
		</main>
	</body>
</html>

<script>
	const formElement = document.getElementById("form-reset")!;
	const formErrorElement = document.getElementById("form-reset.message")!;

	formElement.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(e.target as HTMLFormElement);
		const data = {
			password: formData.get("password")
		};
		const response = await fetch("/api/password/reset", {
			method: "POST",
			body: JSON.stringify(data)
		});
		if (response.ok) {
			window.location.href = "/";
		} else {
			formErrorElement.innerText = await response.text();
		}
	});
</script>
