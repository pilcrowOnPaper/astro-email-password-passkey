---
import { getUserRecoverCode } from "@lib/server/user";
import { getUserPasskeyCredentials, getUserSecurityKeyCredentials } from "@lib/server/webauthn";
import { get2FARedirect } from "@lib/server/2fa";
import { encodeBase64, encodeHexLowerCase } from "@oslojs/encoding";

if (Astro.locals.user === null || Astro.locals.session === null) {
	return Astro.redirect("/login");
}
if (Astro.locals.user.registered2FA && !Astro.locals.session.twoFactorVerified) {
	return Astro.redirect(get2FARedirect(Astro.locals.user));
}
const passkeyCredentials = getUserPasskeyCredentials(Astro.locals.user.id);
const securityKeyCredentials = getUserSecurityKeyCredentials(Astro.locals.user.id);
const recoveryCode = getUserRecoverCode(Astro.locals.user.id);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Settings</title>
	</head>
	<body>
		<header>
			<a href="/">Home</a>
			<a href="/settings">Settings</a>
		</header>
		<main>
			<h1>Settings</h1>
			<section>
				<h2>Update email</h2>
				<p>Your email: {Astro.locals.user.email}</p>
				<form id="form-email">
					<label for="form-email.email">New email</label>
					<input type="email" id="form-email.email" name="email" required /><br />
					<button>Update</button>
					<p id="form-email.message"></p>
				</form>
			</section>
			<section>
				<h2>Update password</h2>
				<form id="form-password">
					<label for="form-password.password">Current password</label>
					<input type="password" id="form-email.password" name="password" autocomplete="current-password" required /><br
					/>
					<label for="form-password.new-password">New password</label>
					<input
						type="password"
						id="form-password.new-password"
						name="new-password"
						autocomplete="new-password"
						required
					/><br />
					<button>Update</button>
					<p id="form-password.message"></p>
				</form>
			</section>

			<section>
				<h2>Authenticator app</h2>
				{
					Astro.locals.user.registeredTOTP ? (
						<>
							<a href="/2fa/totp/setup">Update TOTP</a>
							<form id="form-disconnect-totp">
								<button>Disconnect</button>
								<p id="form-disconnect-totp.message" />
							</form>
						</>
					) : (
						<a href="/2fa/totp/setup">Set up TOTP</a>
					)
				}
			</section>
			<section>
				<h2>Passkeys</h2>
				<p>Passkeys are WebAuthn credentials that validate your identity using your device.</p>
				<ul>
					{
						passkeyCredentials.map((credential) => {
							return (
								<li id={`item-passkey-${encodeHexLowerCase(credential.id)}`}>
									<p>{credential.name}</p>
									<button data-credential-id={encodeBase64(credential.id)} class="button-delete-passkey">
										Delete
									</button>
								</li>
							);
						})
					}
				</ul>
				<a href="/2fa/passkey/register">Add</a>
			</section>
			<section>
				<h2>Security keys</h2>
				<p>Security keys are WebAuthn credentials that can only be used for two-factor authentication.</p>
				<ul>
					{
						securityKeyCredentials.map((credential) => {
							return (
								<li id={`item-security-key-${encodeHexLowerCase(credential.id)}`}>
									<p>{credential.name}</p>
									<button data-credential-id={encodeBase64(credential.id)} class="button-delete-security-key">
										Delete
									</button>
								</li>
							);
						})
					}
				</ul>
				<a href="/2fa/security-key/register">Add</a>
			</section>

			{
				recoveryCode !== null && (
					<section>
						<h1>Recovery code</h1>
						<p id="recovery-code">Your recovery code is: {recoveryCode}</p>
						<button id="button-generate-recovery-code">Generate new code</button>
					</section>
				)
			}
			<section></section>
		</main>
	</body>
</html>

<script>
	import { decodeBase64, encodeBase64urlNoPadding, encodeHexLowerCase } from "@oslojs/encoding";

	const emailFormElement = document.getElementById("form-email") as HTMLFormElement;
	const emailFormErrorElement = document.getElementById("form-email.message") as HTMLElement;

	emailFormElement.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(e.target as HTMLFormElement);
		const data = {
			email: formData.get("email")
		};
		const response = await fetch("/api/email-verification", {
			method: "POST",
			body: JSON.stringify(data)
		});
		if (response.ok) {
			window.location.href = "/verify-email";
		} else {
			emailFormErrorElement.innerText = await response.text();
		}
	});

	const passwordFormElement = document.getElementById("form-password") as HTMLFormElement;
	const passwordFormErrorElement = document.getElementById("form-password.message") as HTMLElement;

	passwordFormElement.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(e.target as HTMLFormElement);
		const data = {
			password: formData.get("password"),
			new_password: formData.get("new-password")
		};
		const response = await fetch("/api/user/password", {
			method: "PATCH",
			body: JSON.stringify(data)
		});
		if (response.ok) {
			passwordFormErrorElement.innerText = "Your password was updated.";
		} else {
			passwordFormErrorElement.innerText = await response.text();
		}
	});

	const disconnectTOTPFormElement = document.getElementById("form-disconnect-totp") as HTMLFormElement;
	const disconnectTOTPFormMessageElement = document.getElementById("form-disconnect-totp.message") as HTMLElement;

	disconnectTOTPFormElement.addEventListener("submit", async (e) => {
		e.preventDefault();
		const response = await fetch("/api/user/totp", {
			method: "DELETE"
		});
		if (response.ok) {
			disconnectTOTPFormMessageElement.innerText = "Success";
		} else {
			disconnectTOTPFormMessageElement.innerText = await response.text();
		}
	});

	const generateRecoveryCodeButtonElement = document.getElementById(
		"button-generate-recovery-code"
	) as HTMLButtonElement;
	const recoveryCodeElement = document.getElementById("recovery-code") as HTMLElement;
	generateRecoveryCodeButtonElement.addEventListener("click", async () => {
		const response = await fetch("/api/user/recover-code/reset", {
			method: "POST"
		});
		if (response.ok) {
			const recoveryCode = await response.text();
			recoveryCodeElement.innerText = `Your recovery code is: ${recoveryCode}`;
		}
	});

	const passkeyDeleteButtonElements = document.getElementsByClassName(
		"button-delete-passkey"
	) as HTMLCollectionOf<HTMLButtonElement>;

	for (const button of passkeyDeleteButtonElements) {
		button.addEventListener("click", async (e) => {
			const _button = e.target as HTMLButtonElement;
			const encodedCredentialId = _button.attributes.getNamedItem("data-credential-id")?.value ?? null;
			if (encodedCredentialId === null) {
				throw new Error();
			}
			const credentialId = decodeBase64(encodedCredentialId);
			const url = `/api/user/passkey/credentials/${encodeBase64urlNoPadding(credentialId)}`;
			const response = await fetch(url, {
				method: "DELETE"
			});
			if (response.ok) {
				document.getElementById(`item-passkey-${encodeHexLowerCase(credentialId)}`)?.remove();
			}
		});
	}

	const securityKeyDeleteButtonElements = document.getElementsByClassName(
		"button-delete-security-key"
	) as HTMLCollectionOf<HTMLButtonElement>;

	for (const button of securityKeyDeleteButtonElements) {
		button.addEventListener("click", async (e) => {
			const _button = e.target as HTMLButtonElement;
			const encodedCredentialId = _button.attributes.getNamedItem("data-credential-id")?.value ?? null;
			if (encodedCredentialId === null) {
				throw new Error();
			}
			const credentialId = decodeBase64(encodedCredentialId);
			const url = `/api/user/security-key/credentials/${encodeBase64urlNoPadding(credentialId)}`;
			const response = await fetch(url, {
				method: "DELETE"
			});
			if (response.ok) {
				document.getElementById(`item-security-key-${encodeHexLowerCase(credentialId)}`)?.remove();
			}
		});
	}
</script>
